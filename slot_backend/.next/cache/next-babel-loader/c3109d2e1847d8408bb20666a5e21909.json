{"ast":null,"code":"var __jsx = React.createElement;\nimport AdminLayoutHoc from \"../../components/Layout/AdminLayoutHoc\";\nimport Link from 'next/link';\nimport React, { useState, useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Cookies, { getJSON } from \"js-cookie\";\nimport { ServiceUser } from \"../../service/\"; //import '../../styles/styles.scss';\n\nimport Dialog from 'react-bootstrap-dialog';\nimport { MDBContainer } from 'mdbreact';\nexport default class Users extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      data: [],\n      rawdata: [],\n      errorMessage: \"\",\n      role_data: [],\n      pagetotal: 0,\n      pagenumber: 0,\n      recordtotal: 0,\n      rowperpage: 10,\n      pagearr: [],\n      startrow: 0,\n      endrow: 0,\n      searchtxt: \"\"\n    };\n    this.deleteUser = this.deleteUser.bind(this);\n    this.setErrorMsg = this.setErrorMsg.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onConfirmClick = this.onConfirmClick.bind(this);\n    this.handleSelectRowPerPageChange = this.handleSelectRowPerPageChange.bind(this);\n    this.handleSelectPageNumberChange = this.handleSelectPageNumberChange.bind(this);\n    this.onSearchClick = this.onSearchClick.bind(this);\n    this.onSearchLevel = this.onSearchLevel.bind(this);\n  }\n\n  onSearchLevel(level_id) {\n    console.log('get myrole');\n    const myrole = this.state.role_data.filter(role => {\n      return role.user_level_id == level_id;\n    });\n    const user_level_name = myrole.map((role, index) => {\n      return role.user_level_name;\n    }); //console.log('myrole:' + myrole);\n\n    return user_level_name;\n  }\n\n  onClick() {\n    this.dialog.showAlert('Hello Dialog!');\n  }\n\n  onConfirmClick() {\n    this.dialog.show({\n      title: 'Spiderbot confirm',\n      body: 'Are you sure?',\n      actions: [Dialog.CancelAction(() => {\n        this.dialog.hide();\n      }), Dialog.OKAction(() => {})],\n      bsSize: 'small',\n      onHide: dialog => {\n        this.dialog.hide();\n        console.log('closed by clicking background.');\n      }\n    });\n  }\n\n  fetchUsers() {\n    console.log(\"fetchUsers\");\n    ServiceUser.listUserrole().then(res => {\n      console.log(res.data);\n      const {\n        data,\n        status\n      } = res.data;\n\n      if (status === 2000) {\n        console.log(data); //setUsers(data);\n\n        this.state.data = data;\n      } else {\n        setErrorMsg(res.data.msg);\n      }\n    });\n  }\n\n  clickButton() {\n    Router.push(\"/user/add\");\n  }\n\n  async deleteUser(id) {\n    if (this.state.errorMessage) this.setErrorMsg(\"\");\n\n    try {\n      const res = await ServiceUser.deleteUser(id);\n\n      if (res.data.status === 2000) {\n        this.setState({\n          data: this.state.data.filter(user => {\n            return user._id !== id;\n          })\n        });\n        this.setState({\n          rawdata: this.state.rawdata.filter(user => {\n            return user._id !== id;\n          })\n        });\n      } else {\n        this.setErrorMsg(res.data.message);\n        this.dialog.showAlert(res.data.message);\n      }\n    } catch (error) {\n      console.error(\"An unexpected error happened occurred:\", error);\n      this.setErrorMsg(error.message);\n      this.dialog.showAlert(error);\n    }\n  }\n\n  onSearchClick() {\n    var name = this.state.searchtxt;\n    var datalength = this.state.rawdata.length;\n\n    if (name != \"\") {\n      this.setState({\n        data: this.state.rawdata.filter(user => {\n          return user.user_name.indexOf(name) !== -1;\n        })\n      });\n      datalength = this.state.rawdata.filter(user => {\n        return user.user_name.indexOf(name) !== -1;\n      }).length;\n    } else {\n      this.setState({\n        data: this.state.rawdata\n      });\n    }\n\n    var page_remain = Math.floor(datalength / this.state.rowperpage);\n    var num = datalength % this.state.rowperpage;\n\n    if (num > 0) {\n      page_remain++;\n    }\n\n    var arr = [];\n    var i;\n\n    for (i = 0; i < page_remain; i++) {\n      arr.push(i + 1);\n    }\n\n    var pagenum = 1;\n    var startrow = (pagenum - 1) * this.state.rowperpage;\n    var endrow = startrow + this.state.rowperpage;\n    this.setState({\n      recordtotal: datalength,\n      pagetotal: page_remain,\n      pagenumber: pagenum,\n      pagearr: arr,\n      startrow: startrow,\n      endrow: endrow\n    });\n  }\n\n  componentDidMount() {\n    if (!Cookies.get(\"user\")) {\n      Router.push(\"/\");\n    }\n\n    ServiceUser.listUser().then(res => {\n      console.log(res.data);\n      const {\n        data,\n        status\n      } = res.data;\n\n      if (status === 2000) {\n        console.log(\"data length : \" + data.length);\n        this.setState({\n          data: data\n        });\n        this.setState({\n          rawdata: data\n        });\n        ServiceUser.listSystemRole().then(res => {\n          console.log(\"res data=>\" + res.data);\n          const {\n            data,\n            status\n          } = res.data;\n          console.log(\"status=>\" + status);\n\n          if (status === 2000) {\n            console.log(\"data :=>\" + data);\n            this.setState({\n              role_data: data\n            });\n          } else {\n            //this.setErrorMsg(res.data.msg);\n            this.dialog.showAlert(res.data.message);\n          }\n        });\n        var page_remain = Math.floor(data.length / this.state.rowperpage);\n        var num = data.length % this.state.rowperpage;\n\n        if (num > 0) {\n          page_remain++;\n        }\n\n        var arr = [];\n        var i;\n\n        for (i = 0; i < page_remain; i++) {\n          arr.push(i + 1);\n        }\n\n        var pagenum = 1;\n        var startrow = (pagenum - 1) * this.state.rowperpage;\n        var endrow = startrow + this.state.rowperpage;\n        this.setState({\n          recordtotal: data.length,\n          pagetotal: page_remain,\n          pagenumber: pagenum,\n          pagearr: arr,\n          startrow: startrow,\n          endrow: endrow\n        });\n      } else {\n        this.setErrorMsg(res.data.msg);\n      }\n    });\n  }\n\n  setErrorMsg(msg) {\n    this.setState({\n      errorMessage: msg\n    });\n  }\n\n  handleSelectRowPerPageChange(e) {\n    e.preventDefault();\n    console.log(\"e.target.value :\" + e.target.value);\n    this.setState({\n      rowperpage: e.target.value\n    });\n    var page_remain = Math.floor(this.state.recordtotal / e.target.value);\n    console.log(\"pagetotal : \" + page_remain);\n    var num = this.state.recordtotal % e.target.value;\n    console.log(\"num : \" + num);\n\n    if (num > 0) {\n      page_remain++;\n    }\n\n    var arr = [];\n    var i;\n\n    for (i = 0; i < page_remain; i++) {\n      arr.push(i + 1);\n    }\n\n    console.log(\"arr : \" + arr);\n    var pagenum = 1;\n    var startrow = (pagenum - 1) * e.target.value;\n    var endrow = startrow + e.target.value;\n    this.setState({\n      pagearr: []\n    });\n    console.log(\"startrow : \" + startrow);\n    console.log(\"endrow : \" + endrow);\n    this.setState({\n      data: this.state.data,\n      pagetotal: page_remain,\n      pagenumber: 1,\n      pagearr: arr,\n      startrow: startrow,\n      endrow: endrow\n    });\n    this.forceUpdate();\n  }\n\n  handleSelectPageNumberChange(e) {\n    e.preventDefault();\n    this.setState({\n      pagenumber: e.target.value\n    });\n    var pagenum = e.target.value;\n    var startrow = (pagenum - 1) * this.state.rowperpage;\n    var endrow = startrow + this.state.rowperpage;\n    this.setState({\n      startrow: startrow,\n      endrow: endrow\n    });\n  }\n\n  render() {\n    return __jsx(AdminLayoutHoc, {\n      contentTitle: 'Users',\n      contentTitleButton: __jsx(Link, {\n        href: \"/users/add\"\n      }, __jsx(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-success btn-sm\"\n      }, __jsx(\"i\", {\n        className: \"fa fa-user-plus fa-fw\"\n      }), \" Add a new user\")),\n      url: this.props.url\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(\"div\", {\n      className: \"card\"\n    }, __jsx(\"div\", {\n      className: \"card-header\"\n    }, __jsx(MDBContainer, null, __jsx(\"div\", {\n      className: \"wrapper\"\n    }, __jsx(\"div\", {\n      className: \"w-auto h-25 p-3  d-inline-block\"\n    }, \"Row per page\", __jsx(\"select\", {\n      id: \"select-1\",\n      className: \"form-control\",\n      value: this.state.rowperpage,\n      onChange: this.handleSelectRowPerPageChange\n    }, __jsx(\"option\", {\n      value: \"10\"\n    }, \"10\"), __jsx(\"option\", {\n      value: \"15\"\n    }, \"15\"), __jsx(\"option\", {\n      value: \"20\"\n    }, \"20\"), __jsx(\"option\", {\n      value: \"25\"\n    }, \"25\"), __jsx(\"option\", {\n      value: \"30\"\n    }, \"30\"), __jsx(\"option\", {\n      value: \"35\"\n    }, \"35\"), __jsx(\"option\", {\n      value: \"40\"\n    }, \"40\"), __jsx(\"option\", {\n      value: \"45\"\n    }, \"45\"), __jsx(\"option\", {\n      value: \"50\"\n    }, \"50\"))), __jsx(\"div\", {\n      className: \"w-auto h-25 p-3  d-inline-block\"\n    }, \"PageNumber\", __jsx(\"select\", {\n      id: \"select-1\",\n      className: \"form-control\",\n      value: this.state.pagenumber,\n      onChange: this.handleSelectPageNumberChange\n    }, this.state.pagearr.map((p, index) => {\n      return __jsx(\"option\", {\n        value: p,\n        key: index\n      }, p);\n    }))), __jsx(\"div\", {\n      className: \"card-tools d-inline-block\"\n    }, __jsx(\"div\", {\n      className: \"input-group input-group-sm\",\n      style: {\n        width: '100%'\n      }\n    }, __jsx(\"input\", {\n      type: \"text\",\n      name: \"table_search\",\n      className: \"form-control float-right\",\n      placeholder: \"Search\",\n      onChange: e => {\n        this.setState({\n          searchtxt: e.target.value\n        });\n        var name = e.target.value;\n        var datalength = this.state.rawdata.length;\n\n        if (name != \"\") {\n          this.setState({\n            data: this.state.rawdata.filter(user => {\n              return user.user_name.indexOf(name) !== -1;\n            })\n          });\n          datalength = this.state.rawdata.filter(user => {\n            return user.user_name.indexOf(name) !== -1;\n          }).length;\n        } else {\n          this.setState({\n            data: this.state.rawdata\n          });\n        }\n\n        var page_remain = Math.floor(datalength / this.state.rowperpage);\n        var num = datalength % this.state.rowperpage;\n\n        if (num > 0) {\n          page_remain++;\n        }\n\n        var arr = [];\n        var i;\n\n        for (i = 0; i < page_remain; i++) {\n          arr.push(i + 1);\n        }\n\n        var pagenum = 1;\n        var startrow = (pagenum - 1) * this.state.rowperpage;\n        var endrow = startrow + this.state.rowperpage;\n        this.setState({\n          recordtotal: datalength,\n          pagetotal: page_remain,\n          pagenumber: pagenum,\n          pagearr: arr,\n          startrow: startrow,\n          endrow: endrow\n        });\n      },\n      value: this.state.searchtxt\n    }), __jsx(\"div\", {\n      className: \"input-group-append\"\n    }, __jsx(\"button\", {\n      className: \"btn btn-default\"\n    }, __jsx(\"i\", {\n      className: \"fa fa-search\",\n      onClick: this.onSearchClick\n    })))))))), __jsx(\"div\", {\n      className: \"card-body table-responsive p-0\"\n    }, __jsx(\"table\", {\n      className: \"table table-hover\"\n    }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Username\"), __jsx(\"th\", null, \"Email\"), __jsx(\"th\", null, \"Level\"), __jsx(\"th\", null, \"Last login\"), __jsx(\"th\", {\n      style: {\n        textAlign: \"right\"\n      }\n    }, \"Edit / Delete\"))), __jsx(\"tbody\", null, this.state.data.map((user, index) => {\n      let classBadge = 'danger';\n      let mystatus = 'disable';\n\n      if (user.user_status === '1') {\n        classBadge = 'success';\n        mystatus = 'enable';\n      }\n\n      if (index >= this.state.startrow && index < this.state.endrow) //console.log(\"userid\" + user.id);\n        return __jsx(\"tr\", {\n          key: index\n        }, __jsx(\"td\", {\n          className: \"py-1\"\n        }, __jsx(\"label\", {\n          className: `badge badge-${classBadge}`\n        }, mystatus), user.user_name), __jsx(\"td\", {\n          className: \"py-1\"\n        }, user.user_email), __jsx(\"td\", {\n          className: \"py-1\"\n        }, this.onSearchLevel(user.user_level)), __jsx(\"td\", {\n          className: \"py-1\"\n        }, user.last_login), __jsx(\"td\", {\n          className: \"py-1\",\n          style: {\n            textAlign: \"right\"\n          }\n        }, __jsx(\"button\", {\n          type: \"button\",\n          className: \"btn btn-warning btn-icon-text\",\n          onClick: () => {\n            console.log(\"edit userid\" + user._id);\n            Cookies.set(\"userid\", user._id);\n            Router.push(\"/users/edit\");\n          },\n          style: {\n            marginLeft: 5,\n            width: 80\n          } //onClick={this.onClick}\n\n        }, \"Edit\"), __jsx(\"button\", {\n          type: \"button\",\n          onClick: () => {\n            this.dialog.show({\n              title: 'Slot Admin confirm',\n              body: 'Are you sure?',\n              actions: [Dialog.CancelAction(() => {\n                this.dialog.hide();\n              }), Dialog.OKAction(() => {\n                console.log(\"delete userid\" + user._id);\n                this.deleteUser(user._id);\n              })],\n              bsSize: 'small',\n              onHide: dialog => {\n                this.dialog.hide();\n                console.log('closed by clicking background.');\n              }\n            });\n          },\n          style: {\n            marginLeft: 5,\n            width: 80\n          },\n          className: \"btn btn-danger btn-icon-text\"\n        }, \"Delete\")));\n    })))))), __jsx(Dialog, {\n      ref: el => {\n        this.dialog = el;\n      }\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}