{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AdminLayoutHoc from \"../../components/Layout/AdminLayoutHoc\";\nimport Link from 'next/link';\nimport React, { useState, useEffect, Component } from \"react\";\nimport Router from \"next/router\";\nimport Cookies from \"js-cookie\";\nimport { ServiceAgent, ServiceUserAgent, ServiceBrand, ServiceMember, ServiceGameService, ServiceWallets } from \"../../service\";\nimport Dialog from 'react-bootstrap-dialog';\nexport default class EditWallets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSwitchChange\", nr => () => {\n      let switchNumber = `switch${nr}`;\n      this.setState({\n        [switchNumber]: !this.state[switchNumber]\n      });\n    });\n\n    this.state = {\n      //auth: { username: \"\", password: \"\", role: \"3\", rolename: \"User\" },            \n      user_name: \"\",\n      user_email: \"\",\n      user_pass: \"\",\n      add_date: \"\",\n      user_level: \"3\",\n      user_status: \"\",\n      //1=enable , 0=disable\n      switch1: true,\n      walletid: Cookies.get(\"walletid\"),\n      errorMessage: \"\",\n      datas: [],\n      role_data: [],\n      mydatas: {},\n      //value: \"Master\",\n      data_service: [],\n      data_agent: [],\n      data_brand: [],\n      data_member: [],\n      brand: \"\",\n      mem: \"\",\n      agent: \"\",\n      isDownLine: false,\n      game_username: \"\",\n      game_password: \"\",\n      agent_code: \"\",\n      brand_code: \"\",\n      credit: \"0\" // role: \"3\",\n      // rolename: \"User\",\n\n    };\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.handleToggleChange = this.handleToggleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setErrorMsg = this.setErrorMsg.bind(this); //this.onClick = this.onClick.bind(this);\n    //this.onConfirmClick = this.onConfirmClick.bind(this)\n\n    this.handleResetSubmit = this.handleResetSubmit.bind(this); //this.onSearchLevel = this.onSearchLevel.bind(this);\n\n    this.onSearchAgentCode = this.onSearchAgentCode.bind(this);\n    this.handleSelectMemberChange = this.handleSelectMemberChange.bind(this); //this.SearchAgent = this.SearchAgent.bind(this);\n\n    this.handleSelectBrandChange = this.handleSelectBrandChange.bind(this);\n  }\n\n  handleSelectBrandChange(e) {\n    e.preventDefault();\n    console.log('e.target.value =>' + e.target.value);\n    this.setState({\n      brand: e.target.value\n    });\n  }\n\n  handleSelectMemberChange(e) {\n    e.preventDefault();\n    console.log('e.target.value =>' + e.target.value);\n    const agent_code = this.onSearchAgentCode(e.target.value)[0];\n    this.setState({\n      mem: e.target.value,\n      agent_code: agent_code\n    });\n    ServiceBrand.listBrands().then(res => {\n      console.log(res.data);\n      const {\n        data,\n        status\n      } = res.data;\n\n      if (status === 2000) {\n        console.log(\"data length : \" + data.length); //this.setState({ data_brand: data });\n\n        let data_brand = data;\n        const agent_lineup = this.SearchAgent_LineUp(agent_code)[0];\n        console.log('agent_lineup =>' + agent_lineup);\n        console.log('agent_code =>' + agent_code);\n        Cookies.set(\"serviceagent\", agent_code);\n        var agent_param = \"\";\n\n        if (agent_lineup === \"\" || agent_lineup === \"-\") {\n          this.setState({\n            isDownLine: false\n          });\n          agent_param = agent_code;\n        } else {\n          this.setState({\n            isDownLine: true\n          });\n          agent_param = agent_lineup;\n        }\n\n        ServiceGameService.listServiceFromAgent(agent_param).then(res => {\n          console.log(res.data);\n          const {\n            data,\n            status\n          } = res.data;\n\n          if (status === 2000) {\n            console.log(\"data service length : \" + data.length);\n            this.setState({\n              data_service: data\n            });\n            let my_data_brand = [];\n            var i;\n\n            for (i = 0; i < data.length; i++) {\n              //data_brand.filter()\n              const brands = data_brand.filter(brand => {\n                return brand.brand_code == data[i].brand_code;\n              }); //console.log('brands : ' + brands);\n\n              const brand_name = brands.map((brand, index) => {\n                return brand.brand_name;\n              });\n              console.log('brand_name : ' + brand_name[0]);\n              my_data_brand.push({\n                brand_name: brand_name[0],\n                brand_code: data[i].brand_code\n              });\n            }\n\n            console.log('data_brand : ' + JSON.stringify(my_data_brand));\n            this.setState({\n              data_brand: my_data_brand\n            });\n            this.setState({\n              brand: my_data_brand[0].brand_name\n            });\n            this.setState({\n              brand_code: my_data_brand[0].brand_code\n            });\n          } else {\n            this.setErrorMsg(res.data.msg);\n          }\n        });\n      } else {\n        this.setErrorMsg(res.data.msg);\n      }\n    });\n  }\n\n  onSearchAgentCode(mem_username) {\n    console.log('get Agent Code');\n    const mems = this.state.data_member.filter(mem => {\n      return mem.mem_username == mem_username;\n    });\n    const agentCode = mems.map((mem, index) => {\n      return mem.agent_code;\n    }); //console.log('myrole:' + myrole);\n\n    return agentCode;\n  }\n\n  handleResetSubmit() {\n    Router.push(\"/wallets\");\n  }\n\n  SearchAgent_LineUp(agent_code) {\n    console.log('get agent_code');\n    const agents = this.state.data_agent.filter(agent => {\n      return agent.agent_code == agent_code;\n    });\n    const agent_lineup = agents.map((agent, index) => {\n      return agent.agent_lineup;\n    }); //console.log('myrole:' + myrole);\n\n    return agent_lineup;\n  }\n\n  SearchAgent_LineUp2(data_agent, agent_code) {\n    console.log('get agent_code');\n    const agents = data_agent.filter(agent => {\n      return agent.agent_code == agent_code;\n    });\n    console.log('agents : ' + JSON.stringify(agents));\n    const agent_lineup = agents.map((agent, index) => {\n      return agent.agent_lineup;\n    }); //console.log('myrole:' + myrole);\n\n    return agent_lineup;\n  }\n\n  async handleSubmit() {\n    try {\n      if (this.state.agent_code !== \"\" && this.state.brand_code !== \"\" && this.state.game_username !== \"\" && this.state.game_password !== \"\" && this.state.credit !== \"\") {\n        const a = {\n          agent_code: this.state.agent_code,\n          mem_username: this.state.mem,\n          brand_code: this.state.brand_code,\n          game_username: this.state.game_username,\n          game_password: this.state.game_password\n        };\n        const res = await ServiceWallets.editWallets(a, this.state.walletid);\n        console.log('res : ' + res.data);\n\n        if (res.data.status === 2000) {\n          const b = {\n            mem_balance: this.state.credit\n          };\n          const res_member = await ServiceMember.editMember(b, this.state.mem);\n          console.log('res : ' + res_member.data);\n\n          if (res_member.data.status === 2000) {\n            console.log('Edit Member : ' + this.state.mem + ' wallets Successfully!!!');\n            this.dialog.show({\n              title: 'Slot Admin information',\n              body: 'Edit Member : ' + this.state.mem + ' wallets to system is successfully.',\n              actions: [Dialog.OKAction(() => {\n                Router.push(\"/wallets\");\n              })]\n            });\n          } else {\n            this.dialog.showAlert(res_member.data.message);\n            this.setErrorMsg(res_member.data.msg);\n          }\n        } else {\n          this.dialog.showAlert(res.data.message);\n          this.setErrorMsg(res.data.msg);\n        }\n      } else {\n        this.dialog.showAlert('กรุณาใส่ข้อมูลให้ครบ ก่อนกดปุ่ม Save!');\n      }\n    } catch (error) {\n      this.dialog.showAlert(error);\n      console.error(\"An unexpected error happened occurred:\", error);\n      this.setErrorMsg(error.message);\n    } //e.preventDefault();\n\n  }\n\n  handleSelectChange(e) {\n    console.log(\"e.target.value :\" + e.target.value);\n    this.setState({\n      rolename: e.target.value\n    });\n    const v = this.onSearchLevel(e.target.value);\n    this.setState({\n      role: v,\n      user_level: v\n    });\n  }\n\n  handleToggleChange(e) {\n    console.log(\"e.target.value :\" + e.target.value);\n    this.setState({\n      user_enable: e.target.value\n    });\n  }\n\n  setErrorMsg(msg) {\n    console.log(msg);\n    this.setState({\n      errorMessage: msg\n    });\n  }\n\n  componentDidMount() {\n    if (!Cookies.get(\"user\")) {\n      Router.push(\"/\");\n    }\n\n    ServiceWallets.getWalletsFromId(Cookies.get(\"walletid\")).then(res => {\n      console.log(res.data);\n      const {\n        data,\n        status\n      } = res.data;\n\n      if (status === 2000) {\n        console.log(\"data length : \" + data.length);\n        const {\n          mem_username,\n          brand_code,\n          game_username,\n          game_password,\n          agent_code\n        } = data[0];\n        this.setState({\n          mem: mem_username,\n          brand_code: brand_code,\n          game_username: game_username,\n          game_password: game_password,\n          agent_code: agent_code\n        });\n        ServiceMember.getBalance(mem_username).then(res => {\n          console.log(\"res : \" + JSON.stringify(res.data));\n          const {\n            data,\n            status\n          } = res.data;\n\n          if (status === 2000) {\n            const {\n              mem_balance\n            } = data;\n            this.setState({\n              credit: mem_balance\n            });\n          } else {\n            this.setErrorMsg(res.data.msg);\n          }\n        }).catch(error => {\n          this.setErrorMsg(error);\n        });\n      } else {\n        this.setErrorMsg(res.data.msg);\n      }\n    }).catch(error => {\n      this.setErrorMsg(error);\n    });\n  }\n\n  render() {\n    const element = __jsx(\"div\", {\n      className: \"toggle-switch\"\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      \"data-toggle\": \"toggle\",\n      \"data-on\": \"Ready\",\n      \"data-off\": \"Not Ready\",\n      \"data-onstyle\": \"success\",\n      \"data-offstyle\": \"danger\"\n    }));\n\n    return __jsx(AdminLayoutHoc, {\n      contentTitle: 'Edit Wallets',\n      contentTitleButton: __jsx(\"i\", {\n        className: \"fa fa-2x fa-money\"\n      }),\n      url: this.props.url\n    }, __jsx(\"div\", {\n      className: \"offset-md-0\"\n    }, __jsx(\"div\", {\n      className: \"card\"\n    }, __jsx(\"div\", {\n      className: \"card-header\"\n    }), __jsx(\"form\", {\n      className: \"form-horizontal\"\n    }, __jsx(\"div\", {\n      className: \"card-body\"\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-10\"\n    }, __jsx(\"div\", {\n      className: \"input-group mb-3 input-group-sm\"\n    }, __jsx(\"div\", {\n      className: \"input-group-prepend\"\n    }, __jsx(\"span\", {\n      className: \"input-group-text\"\n    }, \"Member\")), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control \",\n      id: \"validation-ex2\" //placeholder=\"agent lineup\"\n      ,\n      onChange: e => this.setState({\n        mem: e.target.value\n      }),\n      value: this.state.mem,\n      required: true,\n      disabled: true\n    })))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-10\"\n    }, __jsx(\"div\", {\n      className: \"input-group mb-3 input-group-sm\"\n    }, __jsx(\"div\", {\n      className: \"input-group-prepend\"\n    }, __jsx(\"span\", {\n      className: \"input-group-text\"\n    }, \"agent code\")), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control \",\n      id: \"validation-ex2\" //placeholder=\"agent lineup\"\n      ,\n      onChange: e => this.setState({\n        agent_code: e.target.value\n      }),\n      value: this.state.agent_code,\n      required: true,\n      disabled: true\n    })))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-10\"\n    }, __jsx(\"div\", {\n      className: \"input-group mb-3 input-group-sm\"\n    }, __jsx(\"div\", {\n      className: \"input-group-prepend\"\n    }, __jsx(\"span\", {\n      className: \"input-group-text\"\n    }, \"brand code\")), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control \",\n      id: \"validation-ex2\" //placeholder=\"agent lineup\"\n      ,\n      onChange: e => this.setState({\n        brand_code: e.target.value\n      }),\n      value: this.state.brand_code,\n      required: true,\n      disabled: true\n    })))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-10\"\n    }, __jsx(\"div\", {\n      className: \"input-group mb-3 input-group-sm\"\n    }, __jsx(\"div\", {\n      className: \"input-group-prepend\"\n    }, __jsx(\"span\", {\n      className: \"input-group-text\"\n    }, \"game username\")), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control \",\n      id: \"validation-ex3\" //placeholder=\"agent name\"\n      ,\n      onChange: e => this.setState({\n        game_username: e.target.value\n      }),\n      value: this.state.game_username,\n      required: true\n    })))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-10\"\n    }, __jsx(\"div\", {\n      className: \"input-group mb-3 input-group-sm\"\n    }, __jsx(\"div\", {\n      className: \"input-group-prepend\"\n    }, __jsx(\"span\", {\n      className: \"input-group-text\"\n    }, \"game password\")), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control \",\n      id: \"validation-ex4\" //placeholder=\"agent detail\"\n      ,\n      onChange: e => this.setState({\n        game_password: e.target.value\n      }),\n      value: this.state.game_password,\n      required: true\n    })))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-10\"\n    }, __jsx(\"div\", {\n      className: \"input-group mb-3 input-group-sm\"\n    }, __jsx(\"div\", {\n      className: \"input-group-prepend\"\n    }, __jsx(\"span\", {\n      className: \"input-group-text\"\n    }, \"credit\")), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control \",\n      id: \"validation-ex3\" //placeholder=\"Password\"\n      ,\n      onChange: e => this.setState({\n        credit: e.target.value\n      }),\n      value: this.state.credit,\n      required: true\n    })))))), __jsx(\"div\", {\n      className: \"card-footer\"\n    }, __jsx(\"div\", {\n      className: \"d-inline-block btn-block\"\n    }, __jsx(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: this.handleResetSubmit\n    }, \"Back\"), __jsx(\"button\", {\n      className: \"btn btn-info float-right\",\n      onClick: this.handleSubmit\n    }, \"Save\")))), __jsx(Dialog, {\n      ref: el => {\n        this.dialog = el;\n      }\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}